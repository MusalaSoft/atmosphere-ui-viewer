apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven-publish'

import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.internal.os.OperatingSystem;

version = '0.0.1'
mainClassName = 'com.android.uiautomator.UiAutomatorViewer'

jar {
    manifest {
        attributes 'Implementation-Title': 'Atmosphere UI Viewer',
                   'Implementation-Version': version,
                   'Main-Class': mainClassName
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url  "https://dl.bintray.com/musala/atmosphere"
    }
    maven {
        url 'http://www.terracotta.org/download/reflector/releases/'
    }
    maven {
        url 'http://download.osgeo.org/webdav/geotools/'
    }
}

dependencies {
    compile 'com.android.tools.ddms:ddmlib:25.1.3'
    compile 'com.google.guava:guava:18.0'
    compile 'org.javassist:javassist:3.18.2-GA'
    compile 'org.reflections:reflections:0.9.9-RC1'
    
    compile 'org.eclipse.core:commands:3.3.0-I20070605-0010'
    compile 'com.google.android:support-v4:r7'
    compile 'org.eclipse:jface:3.3.0-I20070606-0010'
    compile 'org.eclipse.equinox:org.eclipse.equinox.common:3.6.0'

    if (OperatingSystem.current().isWindows()) {
        compile 'org.eclipse:swt.win32.win32.x86_64:3.6.1.v3655c'
    } else if (OperatingSystem.current().isLinux()) {
        compile 'org.eclipse.swt.gtk.linux:x86_64:3.3.0-v3346'
    } else {
        throw new Exception(OperatingSystem.current().toString() + " is not supported.")
    }

    compile 'commons-logging:commons-logging:1.2'
    compile 'com.musala.atmosphere:atmosphere-client-server-lib:0.+'
    compile 'com.musala.atmosphere:atmosphere-client:0.+'
    compile 'com.musala.atmosphere:atmosphere-commons:0.+'
}

publishing {
    publications {
        atmosphereClient(MavenPublication) {
            groupId 'com.musala.atmosphere'
            artifactId 'atmosphere-ui-viewer'
            version version

            from components.java

            // Credit: http://stackoverflow.com/a/32353697/3370842
            pom.withXml {
                // Generate map of resolved versions
                Map resolvedVersionMap = [:]
                Set<ResolvedArtifact> resolvedArtifacts = configurations.compile.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.addAll(configurations.testCompile.getResolvedConfiguration().getResolvedArtifacts())
                resolvedArtifacts.each {
                    ModuleVersionIdentifier mvi = it.getModuleVersion().getId();
                    resolvedVersionMap.put("${mvi.getGroup()}:${mvi.getName()}", mvi.getVersion())
                }

                // Update dependencies with resolved versions
                asNode().dependencies.first().each {
                    def groupId = it.get("groupId").first().value().first()
                    def artifactId = it.get("artifactId").first().value().first()
                    it.get("version").first().value = resolvedVersionMap.get("${groupId}:${artifactId}")
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
